#!/bin/sh

pgrep -x picom > /dev/null || picom -b --config $HOME/.config/picom/picom.jonaburg.conf &
feh --bg-fill $HOME/.config/current-wallpaper.png
setxkbmap us,ara -option "grp:alt_shift_toggle" &
pgrep -x mpris-proxy > /dev/null || mpris-proxy &
pgrep -x sxhkd > /dev/null || sxhkd &
pgrep -x eww > /dev/null || eww daemon &
pgrep -x dunst > /dev/null || dunst &
/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 2>/dev/null &
numlockx on &
xset -dpms &
xset s off &
nm-applet &
xinput set-prop 11 352 0
eww open bar0

bspc config split_ratio               0.52
bspc config border_width              2
bspc config window_gap                5
bspc config split_ratio               0.52
bspc config borderless_monocle        true
bspc config gapless_monocle           true
bspc config focus_follows_pointer     true
bspc config remove_disabled_monitors  true
for side in top right bottom left ; do
	bspc config ${side}_padding 5
done

if [[ `eww get bar_visible` == true ]]; then
  bspc config top_padding 60
fi

bspc config normal_border_color         "#51576d"
bspc config active_border_color         "#9ece6a"
bspc config focused_border_color        "#9ece6a"
bspc config presel_feedback_color       "#d5a4b5"
# bspc config urgent_border_color         "#d5a4b5"

bspc config external_rules_command "$HOME/.config/bspwm/external_rules"

bspc rule -a Screenkey manage=off
bspc rule -a kitty desktop='^1' follow=on
bspc rule -a Thunar desktop='^2' follow=on
bspc rule -a Brave-browser desktop='^3' follow=on
bspc rule -a Microsoft-edge desktop='^3' follow=on
bspc rule -a Slack desktop='^4' follow=on
bspc rule -a obs desktop='^5' follow=on
bspc rule -a TelegramDesktop desktop='^6' follow=on
bspc rule -a Virt-manager desktop='^7' follow=on
bspc rule -a Gimp desktop='^8' follow=on
bspc rule -a Gimp-2.10 desktop='^8' follow=on
bspc rule -a Blender desktop='^8' follow=on
bspc rule -a "Blender:*:Blender Render" state=floating layer=above
bspc rule -a kdenlive desktop='^8' follow=on
bspc rule -a Spotify desktop='^9' follow=on
bspc rule -a "Minecraft 1.20.1" desktop='^9' follow=on
bspc rule -a obsidian desktop='^10' follow=on
bspc rule -a Fig state=floating layer=above manage=off border=off
bspc rule -a "Fig:*:Fig Dashboard" manage=on border=on state=tiled
bspc rule -a rdesktop state=floating

INTERNAL_MONITOR=`xrandr -q | awk '{if (\$2 == "connected") print \$1}' | head -n 1`
INTERNAL_MONITOR_RESOLUTION=`xrandr -q | grep -A1 "$INTERNAL_MONITOR" | tail -n 1 | awk '{print \$1}'`

monitor_add() {
  monitors_count=`bspc query -M | wc -l`
  if [[ `bspc query -M --names | grep "$1"` == "$1" ]]; then
    monitors_count=$monitors_count-1;
  fi
  if [[ $monitors_count -gt 2 ]]; then
    notify-send -t 3000 BSPWM "You already have more than 2 monitors"
    return;
  fi
  MONITORS_ORDER="$INTERNAL_MONITOR $1"
  desktops="XI XII XIII XIV XV XVI XVII XVIII XIX XX"
  if [[ $monitors_count -gt 1 ]]; then
    desktops="XXI XXII XXIII XXIV XXV XXVI XXVII XXVIII XXIX XXX"
    SECOND_MONITOR=`bspc query -M --names | tail -n 1`
    MONITORS_ORDER="$INTERNAL_MONITOR $SECOND_MONITOR $1"
  fi
  bspc monitor "$1" -d $desktops

  # Remove default desktop created by bspwm
  bspc desktop Desktop --remove


  # reorder monitors
  bspc wm -O "$MONITORS_ORDER"
}

monitor_remove() {
  # Add default temp desktop because a minimum of one desktop is required per monitor
  if [[ `bspc query -D --names -m "$1" | grep "Desktop"` == "Desktop" ]]; then bspc monitor "$1" -a Desktop; fi

  for desktop in $(bspc query -D --names -m "$1"); do
    to_desktop="I"
    case "$desktop" in
      XII | XXII) to_desktop="II";;
      XIII | XXIII) to_desktop="III";;
      XIV | XXIV) to_desktop="IV";;
      XV | XXV) to_desktop="V";;
      XVI | XXVI) to_desktop="VI";;
      XVII | XXVII) to_desktop="VII";;
      XVIII | XXVIII) to_desktop="VIII";;
      XIX | XXIX) to_desktop="IX";;
      XX | XXX) to_desktop="X";;
    esac
    bspc desktop "$desktop" --to-monitor "$INTERNAL_MONITOR"
    for node in `bspc query -N -d $desktop`; do
      bspc node "$node" -d "$to_desktop"
    done
    # bspc desktop "$desktop" -r
  done

  # delete default desktops
  bspc desktop Desktop --remove
  bspc monitor "$1" --remove

  # reorder desktops
  bspc monitor "$INTERNAL_MONITOR" -d I II III IV V VI VII VIII IX X
}

bspc monitor "$INTERNAL_MONITOR" -d I II III IV V VI VII VIII IX X
xrandr_cmd="xrandr --output '$INTERNAL_MONITOR' --primary --mode $INTERNAL_MONITOR_RESOLUTION --rotate normal"

for monitor in `bspc query -M --names`; do
  monitor_disconnected=`xrandr -q | grep "$monitor" | awk '{if (\$2 == "disconnected") print \$1}'`
  if [[ $monitor_disconnected == $monitor ]]; then
    monitor_remove $monitor
    xrandr_cmd="$xrandr_cmd --output $monitor --off"
  fi
done

for monitor in `xrandr -q | awk '{if (\$2 == "connected") print \$1}' | head -n 3 | tail -n 2`; do
  monitor_already_added=`bspc query -M --names | grep "$monitor"`
  previous_monitor=`xrandr -q | awk '{if (\$2 == "connected") print \$1}' | grep -B1 "$monitor" | head -n 1`
  monitor_resolution=`xrandr -q | grep -A1 "$monitor" | tail -n 1 | awk '{print \$1}'`
    echo $monitor
  if [[ $monitor_already_added != $monitor ]]; then
    monitor_add $monitor
    xrandr_cmd="$xrandr_cmd --output $monitor --mode $monitor_resolution --rotate normal --right-of $previous_monitor"
  else
    if [[ `bspc query -D -m "$monitor" | wc -l` -lt 10 ]]; then
      monitor_remove $monitor
      monitor_add $monitor
    fi
    xrandr_cmd="$xrandr_cmd --output $monitor --mode $monitor_resolution --rotate normal --right-of $previous_monitor"
  fi
done

echo $xrandr_cmd

eval "$xrandr_cmd"
